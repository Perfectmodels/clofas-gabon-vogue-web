/**
 * Script d'importation des images existantes des stylistes
 * 
 * Ce script importe les images d√©j√† pr√©sentes dans le dossier creators/
 * vers Firebase pour les stylistes qui ont d√©j√† des images dans le JSON.
 */

import { database } from '@/services/firebase';
import { ref, set, push } from 'firebase/database';

// Mapping des dossiers vers les IDs des cr√©ateurs dans le JSON
const folderToCreatorMapping = {
  'angele-epouta': 'creator-3',
  'angelina-creations': 'creator-4', 
  'atelier-isse-by-lita': 'creator-5',
  'beitch-faro': 'creator-11'
};

// Stylistes qui ont des images dans le dossier mais pas dans Firebase
const stylistsWithImages = [
  {
    id: 'creator-3',
    name: 'Ang√®le Epouta',
    folder: 'angele-epouta',
    images: [
      'Angele Epouta Creations (1).jpg',
      'Angele Epouta Creations (2).jpg',
      'Angele Epouta Creations (3).jpg',
      'Angele Epouta Creations (4).jpg',
      'Angele Epouta Creations (5).jpg',
      'Angele Epouta Creations (6).jpg',
      'Angele Epouta Creations (7).jpg',
      'Angele Epouta Creations (8).jpg',
      'Angele Epouta Creations (9).jpg',
      'Angele Epouta Creations (10).jpg',
      'Angele Epouta Creations (11).jpg',
      'Angele Epouta Creations (12).jpg',
      'Angele Epouta Creations (13).jpg',
      'Angele Epouta Creations (14).jpg',
      'Angele Epouta Creations (15).jpg',
      'Angele Epouta Creations (16).jpg',
      'Angele Epouta Creations (17).jpg',
      'Angele Epouta Creations (18).jpg'
    ]
  },
  {
    id: 'creator-4',
    name: 'Angelina Creations',
    folder: 'angelina-creations',
    images: [
      'Angelina Cr√©ations (1).jpg',
      'Angelina Cr√©ations (2).jpg',
      'Angelina Cr√©ations (3).jpg',
      'Angelina Cr√©ations (4).jpg',
      'Angelina Cr√©ations (5).jpg',
      'Angelina Cr√©ations (6).jpg',
      'Angelina Cr√©ations (7).jpg',
      'Angelina Cr√©ations (8).jpg',
      'Angelina Cr√©ations (9).jpg',
      'Angelina Cr√©ations (10).jpg',
      'Angelina Cr√©ations (11).jpg',
      'Angelina Cr√©ations (12).jpg',
      'Angelina Cr√©ations (13).jpg',
      'Angelina Cr√©ations (14).jpg',
      'Angelina Cr√©ations (15).jpg',
      'Angelina Cr√©ations (16).jpg',
      'Angelina Cr√©ations (17).jpg',
      'Angelina Cr√©ations (18).jpg',
      'Angelina Cr√©ations (19).jpg',
      'Angelina Cr√©ations (20).jpg'
    ]
  },
  {
    id: 'creator-5',
    name: 'L\'atelier Iss√© By Lita',
    folder: 'atelier-isse-by-lita',
    images: [
      'Atelier Iss√© By Lita (1).jpg',
      'Atelier Iss√© By Lita (2).jpg',
      'Atelier Iss√© By Lita (3).jpg',
      'Atelier Iss√© By Lita (4).jpg',
      'Atelier Iss√© By Lita (5).jpg',
      'Atelier Iss√© By Lita (6).jpg',
      'Atelier Iss√© By Lita (7).jpg',
      'Atelier Iss√© By Lita (8).jpg',
      'Atelier Iss√© By Lita (9).jpg',
      'Atelier Iss√© By Lita (10).jpg',
      'Atelier Iss√© By Lita (11).jpg',
      'Atelier Iss√© By Lita (12).jpg',
      'Atelier Iss√© By Lita (13).jpg',
      'Atelier Iss√© By Lita (14).jpg',
      'Atelier Iss√© By Lita (15).jpg'
    ]
  },
  {
    id: 'creator-11',
    name: 'Beitch Faro',
    folder: 'beitch-faro',
    images: [
      'Beitch Faro (1).jpg',
      'Beitch Faro (2).jpg',
      'Beitch Faro (3).jpg',
      'Beitch Faro (4).jpg',
      'Beitch Faro (5).jpg',
      'Beitch Faro (6).jpg',
      'Beitch Faro (7).jpg',
      'Beitch Faro (8).jpg',
      'Beitch Faro (9).jpg',
      'Beitch Faro (10).jpg',
      'Beitch Faro (11).jpg',
      'Beitch Faro (12).jpg',
      'Beitch Faro (13).jpg',
      'Beitch Faro (14).jpg',
      'Beitch Faro (15).jpg',
      'Beitch Faro (16).jpg',
      'Beitch Faro (17).jpg',
      'Beitch Faro (18).jpg',
      'Beitch Faro (19).jpg',
      'Beitch Faro (20).jpg',
      'Beitch Faro (21).jpg',
      'Beitch Faro (22).jpg',
      'Beitch Faro (23).jpg',
      'Beitch Faro (24).jpg',
      'Beitch Faro (25).jpg',
      'Beitch Faro (26).jpg',
      'Beitch Faro (27).jpg',
      'Beitch Faro (28).jpg',
      'Beitch Faro (29).jpg',
      'Beitch Faro (30).jpg',
      'Beitch Faro (31).jpg',
      'Beitch Faro (32).jpg',
      'Beitch Faro (33).jpg',
      'Beitch Faro (34).jpg',
      'Beitch Faro (35).jpg',
      'Beitch Faro (36).jpg',
      'Beitch Faro (37).jpg',
      'Beitch Faro (38).jpg',
      'Beitch Faro (39).jpg',
      'Beitch Faro (40).jpg',
      'Beitch Faro (41).jpg',
      'Beitch Faro (42).jpg',
      'Beitch Faro (43).jpg',
      'Beitch Faro (44).jpg',
      'Beitch Faro (45).jpg'
    ]
  }
];

/**
 * G√©n√®re l'URL locale d'une image
 */
function getLocalImageUrl(folder: string, filename: string): string {
  return `/creators/${folder}/${filename}`;
}

/**
 * Importe les images d'un styliste vers Firebase
 */
async function importStylistImages(stylist: typeof stylistsWithImages[0]): Promise<void> {
  console.log(`üîÑ Importation des images pour ${stylist.name}...`);
  
  const imageUrls = stylist.images.map(filename => 
    getLocalImageUrl(stylist.folder, filename)
  );
  
  try {
    // Mettre √† jour le cr√©ateur avec ses images
    const creatorRef = ref(database, `creators/${stylist.id}`);
    await set(creatorRef, {
      id: stylist.id,
      name: stylist.name,
      images: imageUrls,
      updatedAt: new Date().toISOString()
    });
    
    console.log(`‚úÖ ${stylist.name}: ${imageUrls.length} images import√©es`);
  } catch (error) {
    console.error(`‚ùå Erreur lors de l'importation pour ${stylist.name}:`, error);
    throw error;
  }
}

/**
 * Importe toutes les images existantes
 */
export async function importAllExistingImages(): Promise<void> {
  console.log('üöÄ D√©but de l\'importation des images existantes...');
  console.log('================================================');
  
  let totalImages = 0;
  let successCount = 0;
  
  for (const stylist of stylistsWithImages) {
    try {
      await importStylistImages(stylist);
      totalImages += stylist.images.length;
      successCount++;
    } catch (error) {
      console.error(`‚ùå √âchec de l'importation pour ${stylist.name}`);
    }
  }
  
  console.log('\nüìä R√©sum√© de l\'importation:');
  console.log(`‚úÖ Stylistes trait√©s avec succ√®s: ${successCount}/${stylistsWithImages.length}`);
  console.log(`üì∑ Total d'images import√©es: ${totalImages}`);
  
  if (successCount === stylistsWithImages.length) {
    console.log('üéâ Importation termin√©e avec succ√®s !');
  } else {
    console.log('‚ö†Ô∏è Importation termin√©e avec des erreurs');
  }
}

/**
 * V√©rifie quelles images sont d√©j√† pr√©sentes
 */
export function checkExistingImages(): void {
  console.log('üîç V√©rification des images existantes...');
  console.log('==========================================');
  
  stylistsWithImages.forEach(stylist => {
    console.log(`\nüìÅ ${stylist.name} (${stylist.folder}):`);
    console.log(`   üì∑ Nombre d'images: ${stylist.images.length}`);
    console.log(`   üìÇ Dossier: /creators/${stylist.folder}/`);
    console.log(`   üîó Exemple d'URL: ${getLocalImageUrl(stylist.folder, stylist.images[0])}`);
  });
  
  const totalImages = stylistsWithImages.reduce((sum, stylist) => sum + stylist.images.length, 0);
  console.log(`\nüìä Total: ${totalImages} images dans ${stylistsWithImages.length} dossiers`);
}

/**
 * Fonction de test pour v√©rifier l'importation
 */
export function testImportExistingImages() {
  console.log('üß™ Test d\'importation des images existantes');
  console.log('============================================');
  
  checkExistingImages();
  
  console.log('\nüéØ Stylistes avec images disponibles:');
  stylistsWithImages.forEach((stylist, index) => {
    console.log(`${index + 1}. ${stylist.name}`);
    console.log(`   - Dossier: ${stylist.folder}`);
    console.log(`   - Images: ${stylist.images.length}`);
    console.log(`   - ID Firebase: ${stylist.id}`);
  });
  
  console.log('\nüöÄ Pour lancer l\'importation:');
  console.log('importAllExistingImages().then(() => console.log("Importation termin√©e"))');
  
  return {
    stylistsCount: stylistsWithImages.length,
    totalImages: stylistsWithImages.reduce((sum, s) => sum + s.images.length, 0),
    stylists: stylistsWithImages.map(s => ({
      name: s.name,
      folder: s.folder,
      imageCount: s.images.length
    }))
  };
}

// Export par d√©faut
export default {
  stylistsWithImages,
  importAllExistingImages,
  checkExistingImages,
  testImportExistingImages,
  getLocalImageUrl
};
